Flava on Startup:
1. Find data folder
	a. If data folder exists:
		-Populate global list of databases w/ string names
		-Confirm that test database exists
	b. If it doesn't exist, create it and create test database within it
	c. Set global database to test
2. Prompt

Files Extenstions:
-Databases: .fdb (Flava Database File)
-Tables: .ftl (Flava Table)
-Indices: .fix (Flava Index)



Global database as to which database you can conduct CRUD on
List of Commands:
	1. Create
		a. Databases (Directories)
		b. Tables (Sub-directory of a database with a metadata file and a data file)
		c. Indices (Folder in a table folder in case there are multiple?)
	2. Use (default to test like Mongo)
		a. List Databases
		b. List tables
		c. List indices 
	3. Insert
	4. Delete
	5. Select
	6. Update
	7. List

What do commands look like?
Command + Object (Database, Table, Index) + Name Identifier 
+ option + optionParameter
+ extendedOption + extendedOptionParmeter

!!! WHEN USING "ON" IT IS IMPLIED THAT YOU ARE ALWAYS REFERRING TO A TABLE !!!

Supported Commands:
// CREATE
-Create database "DB NAME"
-Create table "TABLE NAME" schema (Schema) 				
-Create ON "TABLE NAME" index "INDEX NAME" schema (parameters to schematize)

// DELETE
-Delete database "DATABASE NAME"					
-Delete table "TABLE NAME" 							
-Delete ON tableName index "INDEX NAME" 			 
-Delete ON tableName values (parameters to delete) where (parameters to find)			

// INSERT
-Insert ON tableName values (parameters to insert)			

// SELECT
-Select ON tableName values (parameters to display) where (parameters to find)

// UPDATE
-Update ON tableName values (parameters to update) where (parameters to find)
-Update ON tableName schema (parameters to schematize)

// List
-List databases
-List tables 
-List indices (table is parameter)

// Use
-Use (database is parameter)



What do schema look like?
Schema (columnName datatype, columnName datatype)

Supported schema data types:
"long" 		// try to parse as long, if it works move on
"double" 	// try to parse as double, it it works move on
"char" 		// this is just a string w/ a length of 1
"boolean"	// this is just true or false
"string"	// this is just text so we test last





